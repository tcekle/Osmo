@using Osmo.Common.Services
@using Osmo.Services

@implements IDisposable

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject GoldenLayoutService LayoutService

@code {
    private ElementReference _layoutContainer;
    private IJSObjectReference _module;
    private DotNetObjectReference<GoldenLayout> _dotNetRef;
    List<string> _routes = [
        "counter"
    ];

    public async Task UpdateSize()
    {
        await _module.InvokeVoidAsync("updateGoldenLayoutSize");
    }
    
    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// </summary>
    protected override void OnInitialized()
    {
        LayoutService.OnAddComponent += AddComponent;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        
        _dotNetRef = DotNetObjectReference.Create(this);
        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./goldenLayoutInterop.js");
        await _module.InvokeVoidAsync("initializeGoldenLayout", _layoutContainer, _dotNetRef);
    }

    [JSInvokable]
    public string RenderBlazorRoute(string route)
    {
        return $"<RouteView RouteData=\"new RouteData(typeof(App), new {{ Url = \"{route}\" }})\" />";
    }

    public async Task AddComponent(string componentName, string title, object parameters = null)
    {
        await _module.InvokeVoidAsync("addGoldenLayoutComponent", componentName, title, parameters ?? new object());
    }
    
    /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    public void Dispose()
    {
        if (_module is IDisposable moduleDisposable)
            moduleDisposable.Dispose();
        else if (_module != null)
            _ = _module.DisposeAsync().AsTask();
        
        _dotNetRef?.Dispose();
    }

}

<style>
    body .lm_content{
        overflow: scroll;
    }
</style>

<div @ref="_layoutContainer" style="width:100%; height:90vh;"></div>