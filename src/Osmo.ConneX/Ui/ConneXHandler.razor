@page "/connex/handler/{Id:int}"
@using Microsoft.EntityFrameworkCore
@using Osmo.ConneX.GraphQl
@using Osmo.ConneX.Providers

@inject IConneXClient _connexGraphql
@inject IDbContextFactory<ConneXMetricsProviderContext> _connexMetricsProviderContextFactory

@if (!_loading)
{
    @if (!_systemFound)
    {
        <MudText>No system found with ID @Id.</MudText>
    }
    else
    {
        <MudText Typo="Typo.h2" class="mb-2">@_system.Entity.EntityName</MudText>
        
        <MudPaper class="p-4 my-2">
            <MudText Typo="Typo.h4" class="mb-2">System information</MudText>
            
            <dl>
                <dt>Hostname</dt>
                <dd>@_system.HostName</dd>
                    
                <dt>IP Address</dt>
                <dd>@_system.IpAddress</dd>
                    
                <dt>Factory</dt>
                <dd>@_system.MachineFactory</dd>
                    
                <dt>System Type</dt>
                <dd>@_system.HandlerType</dd>
            </dl>
        </MudPaper>
        
        <MudPaper Class="p-4 my-2">
            <MudText Typo="Typo.h4" class="mb-2">Programmers</MudText>
            
            <MudDataGrid Items="@_system.Programmers">
                <Columns>
                    <HierarchyColumn />
                    <PropertyColumn Property="x => x.Entity.EntityName" Title="Name"></PropertyColumn>
                    <PropertyColumn Property="x => x.ProgrammerType" Title="Type"></PropertyColumn>
                    <PropertyColumn Property="x => x.IpAddress" Title="IP Address"></PropertyColumn>
                </Columns>
                <ChildRowContent>
                    <MudText Typo="Typo.h5" class="mb-2">Adapters</MudText>
                    
                    <MudDataGrid Items="@context.Item.Adapters">
                        <Columns>
                            <PropertyColumn Property="x => x.Entity.EntityIdentifier" Title="Identifier"></PropertyColumn>
                            <PropertyColumn Property="x => x.AdapterId" Title="Adapter ID"></PropertyColumn>
                        </Columns>
                        
                    </MudDataGrid>
                    
                </ChildRowContent>
            </MudDataGrid>
        </MudPaper>
        
        <MudPaper Class="p-4 my-2">
            <MudTimeline Modifiers TimelinePosition="TimelinePosition.Start">
                @foreach (var evt in _events)
                {
                    <MudTimelineItem>
                        <ItemOpposite>
                            <p>Test</p>
                        </ItemOpposite>
                        <ItemContent>
                            <MudCard Outlined Class="p-2">
                                @if (evt is BeginRunEvent beginRunEvent)
                                {
                                    <MudText Typo="Typo.h6">Begin job</MudText>
                                    <MudText Typo="Typo.body2">Job Name: @beginRunEvent.TaskName</MudText>
                                    <MudText Class="pt-4" Typo="Typo.caption">@evt.Timestamp.DateTime</MudText>
                                }

                                @if (evt is EndRunEvent endRunEvent)
                                {
                                    <MudText Typo="Typo.h6">End job</MudText>
                                    <MudText Typo="Typo.body2">Reason: @endRunEvent.TerminationReason</MudText>
                                    <MudText Class="pt-4" Typo="Typo.caption">@evt.Timestamp.DateTime</MudText>
                                }
                            </MudCard>
                        </ItemContent>
                    </MudTimelineItem>
                }
            </MudTimeline>
        </MudPaper>
    }
}

@code
{
    private bool _loading = true;
    private bool _systemFound = false;
    private IGetSystem_System _system;

    [Parameter]
    public int Id { get; set; }
    
    private List<HandlerEvent> _events = new List<HandlerEvent>();
    

    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        var handler = await _connexGraphql.GetSystem.ExecuteAsync(Id);
        _system = handler.Data.System;

        _systemFound = _system != null;

        if (_systemFound)
        {
            await GetHandlerEvents();
        }
        
        _loading = false;
    }

    /// <summary>
    /// Gets the handler events from ConneX.
    /// </summary>
    private async Task GetHandlerEvents()
    {
        await using var context = await _connexMetricsProviderContextFactory.CreateDbContextAsync();

        var events = context.MqttMessages
            .Where(m => (m.Topic.Contains("h700/beginrun")
                                    || m.Topic.Contains("h700/endrun"))
                                && m.Topic.Contains(_system.HostName.ToLower()));
        
        foreach (var evt in events)
        {
            if (evt.Topic.Contains("beginrun"))
            {
                var beginRunEvent = System.Text.Json.JsonSerializer.Deserialize<BeginRunEvent>(evt.PayloadAsString);
                beginRunEvent.Timestamp = evt.Timestamp;
                _events.Add(beginRunEvent);
            }

            if (evt.Topic.Contains("endrun"))
            {
                var endRunEvent = System.Text.Json.JsonSerializer.Deserialize<EndRunEvent>(evt.PayloadAsString);
                endRunEvent.Timestamp = evt.Timestamp;
                _events.Add(endRunEvent);
            }
        }
    }

    /// <summary>
    /// Base class for all handler events.
    /// </summary>
    private record HandlerEvent
    {
        public DateTimeOffset Timestamp { get; set; }
    }
    
    /// <summary>
    /// End run event.
    /// </summary>
    private record EndRunEvent : HandlerEvent
    {
        public string TerminationReason { get; init; }
    }
    
    /// <summary>
    /// Begin run event.
    /// </summary>
    private record BeginRunEvent : HandlerEvent
    {
        public string TaskName { get; init; }
    }
}
